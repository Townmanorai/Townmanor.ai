name: CI/CD Pipeline for Townmanor.ai

on:
  push:
    branches:
      - "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set Up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    # Step 3: Install Dependencies and Build Project
    - name: Install dependencies
      run: npm ci

    - name: Build React app
      run: |
        npm run build    # This should create the dist folder
        ls -al dist      # List contents of dist for debugging to verify dist folder creation
        tar -czvf react-build.tar.gz -C dist .  # Create the tar.gz file if dist exists

    # Step 4: Check if dist Directory Exists and Create Archive
    - name: Create Build Archive
      run: |
        if [ -d "dist" ]; then
          echo "Found dist directory. Creating archive..."
          tar -czvf react-build.tar.gz -C dist .   # Create archive from dist folder
          echo "Archive created successfully. Listing contents of archive:"
          tar -tzvf react-build.tar.gz # List the archive contents for verification
        else
          echo "dist directory not found, aborting."
          exit 1
        fi

    # Step 5: Deploy to AWS EC2
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ec2-43-205-18-191.ap-south-1.compute.amazonaws.com
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to deployment directory
          cd /home/ubuntu/frontend/_work/Townmanor.ai/Townmanor.ai

          # Backup the current dist folder (if exists)
          if [ -d "dist" ]; then
            echo "Backing up current dist folder..."
            sudo chown -R ubuntu:ubuntu dist   # Ensure ownership
            mv dist dist_backup_$(date +%s)
            sudo chmod -R 755 dist_backup_*    # Ensure permissions for backup
          fi

          # Ensure permissions for deployment directory
          sudo chown -R ubuntu:ubuntu /home/ubuntu/frontend/_work/Townmanor.ai/Townmanor.ai
          sudo chmod -R 755 /home/ubuntu/frontend/_work/Townmanor.ai/Townmanor.ai

          # Remove any existing react-build.tar.gz
          echo "Removing old archive..."
          rm -f react-build.tar.gz

          # Transfer new archive to EC2
          echo "Transferring new archive to EC2..."
          scp -i ~/.ssh/id_rsa react-build.tar.gz ubuntu@ec2-43-205-18-191.ap-south-1.compute.amazonaws.com:/home/ubuntu/frontend/_work/Townmanor.ai/Townmanor.ai

          # Extract the new build
          echo "Extracting new build..."
          mkdir -p dist
          rm -rf dist/*  # Clear the directory before extracting
          tar -xzvf react-build.tar.gz -C dist

          # Debugging: List the extracted files
          echo "Listing contents of dist after extraction:"
          ls -al dist

          # Ensure permissions for the new build
          sudo chown -R ubuntu:ubuntu dist
          sudo chmod -R 755 dist

          # Error handling: Restore the previous build if extraction fails
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Error: Build extraction failed. Restoring previous build..."
            if ls dist_backup_* > /dev/null 2>&1; then
              sudo mv dist_backup_* dist  # Restore backup
              sudo chown -R ubuntu:ubuntu dist  # Restore ownership
              sudo chmod -R 755 dist           # Restore permissions
            fi
            exit 1
          fi

          # Verify deployment by checking Nginx response
          echo "Verifying deployment..."
          if curl -Is http://ec2-43-205-18-191.ap-south-1.compute.amazonaws.com/ | grep -q "200 OK"; then
            echo "New build verified successfully."
          else
            echo "Deployment failed! Restoring previous build..."
            if ls dist_backup_* > /dev/null 2>&1; then
              sudo mv dist_backup_* dist  # Restore backup
              sudo chown -R ubuntu:ubuntu dist  # Restore ownership
              sudo chmod -R 755 dist           # Restore permissions
            fi
            exit 1
          fi

          # Restart Nginx
          echo "Restarting Nginx..."
          sudo systemctl restart nginx

    # Step 6: Archive React build (Optional)
    - name: Archive React build
      uses: actions/upload-artifact@v3
      with:
        name: react-build
        path: react-build.tar.gz
